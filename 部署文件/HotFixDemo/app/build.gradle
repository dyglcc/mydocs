apply plugin: 'com.android.application'

repositories {
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
}
android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'
    signingConfigs { //gradle assembleRelease
        release {
            storeFile file("/Users/dongyuangui/GITHUB/HotFixDemo/app/testjiagu.jks")
            storePassword "111111"
            keyAlias "key0"
            keyPassword "111111"
        }
    }
    defaultConfig {
        applicationId "hotfix.sample.com"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName '1.3.6'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //--------------------
        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement
         */
        multiDexEnabled true
        /**
         * buildConfig can change during patch!
         * we can use the newly value when patch
         */
        buildConfigField "String", "MESSAGE", "\"hotfix apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!
         */
        buildConfigField "String", "HOTFIX_ID", "\"${getHotfixIdValue()}\""
        buildConfigField "String", "PLATFORM", "\"all\""


    }
    buildTypes {
        release {
//            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        yingyongbao {
            manifestPlaceholders = [CHANNEL: "yingyongbao"]
        }
        baidu {
            manifestPlaceholders = [CHANNEL: "baidu"]
        }
    }

}

def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}

def getHotfixIdValue() {
    return hasProperty("HOTFIX_ID") ? HOTFIX_ID : gitSha()
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    //        exclude group: 'com.android.support', module: 'support-annotations'
    //    })
    compile 'com.android.support:appcompat-v7:25.1.0'
    //    testCompile 'junit:junit:4.12'
    compile 'com.android.support:multidex:1.0.1'
    compile(name: 'patchsdk-1.8.1', ext: 'aar')
    //    compile(name: 'hotfix-android-lib-1.8.1', ext: 'aar')
    //    compile(name: 'hotfix-android-loader-1.8.1', ext: 'aar')
    //    compile 'com.tencent.tinker:tinker-android-lib:1.8.1'
    //    provided 'com.tencent.tinker:tinker-android-anno:1.8.1'
    //    compile project(':patchsdk')
//    compile files('libs/patchsdk-1.8.1/classes.jar')
}
apply from: "$projectDir/patch.gradle"

